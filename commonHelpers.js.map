{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    compareDates(selectedDates[0]);\n  },\n};\nflatpickr('#datetime-picker', options);\nlet userSelectedDate = 0;\n\nconst elements = {\n  button: document.querySelector('button[data-start]'),\n  day: document.querySelector('[ data-days]'),\n  hour: document.querySelector('[data-hours]'),\n  minute: document.querySelector('[data-minutes]'),\n  second: document.querySelector('[data-seconds]'),\n};\n\nelements.button.classList.add('inactive');\nelements.button.addEventListener('click', handlerClick);\n\nfunction compareDates(selectedDates) {\n  const currentDate = new Date();\n  if (selectedDates < currentDate) {\n    alert('Please choose a date in the future');\n  } else {\n    userSelectedDate = selectedDates - currentDate;\n    elements.button.classList.remove('inactive');\n  }\n  return userSelectedDate;\n}\n\nfunction handlerClick(event) {\n  console.log('It works!');\n  const dateChosen = convertMs(userSelectedDate);\n  console.log(dateChosen);\n  elements.day.textContent = dateChosen.days;\n  elements.hour.textContent = dateChosen.hours;\n  elements.minute.textContent = dateChosen.minutes;\n  elements.second.textContent = dateChosen.seconds;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["options","selectedDates","compareDates","flatpickr","userSelectedDate","elements","handlerClick","currentDate","event","dateChosen","convertMs","ms","days","hours","minutes","seconds"],"mappings":"oGAGA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAaD,EAAc,CAAC,CAAC,CAC9B,CACH,EACAE,EAAU,mBAAoBH,CAAO,EACrC,IAAII,EAAmB,EAEvB,MAAMC,EAAW,CACf,OAAQ,SAAS,cAAc,oBAAoB,EACnD,IAAK,SAAS,cAAc,cAAc,EAC1C,KAAM,SAAS,cAAc,cAAc,EAC3C,OAAQ,SAAS,cAAc,gBAAgB,EAC/C,OAAQ,SAAS,cAAc,gBAAgB,CACjD,EAEAA,EAAS,OAAO,UAAU,IAAI,UAAU,EACxCA,EAAS,OAAO,iBAAiB,QAASC,CAAY,EAEtD,SAASJ,EAAaD,EAAe,CACnC,MAAMM,EAAc,IAAI,KACxB,OAAIN,EAAgBM,EAClB,MAAM,oCAAoC,GAE1CH,EAAmBH,EAAgBM,EACnCF,EAAS,OAAO,UAAU,OAAO,UAAU,GAEtCD,CACT,CAEA,SAASE,EAAaE,EAAO,CAC3B,QAAQ,IAAI,WAAW,EACvB,MAAMC,EAAaC,EAAUN,CAAgB,EAC7C,QAAQ,IAAIK,CAAU,EACtBJ,EAAS,IAAI,YAAcI,EAAW,KACtCJ,EAAS,KAAK,YAAcI,EAAW,MACvCJ,EAAS,OAAO,YAAcI,EAAW,QACzCJ,EAAS,OAAO,YAAcI,EAAW,OAC3C,CAEA,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}